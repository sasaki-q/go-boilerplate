// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package restapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yUTWvVTBTHv8rDeVzmNqkvINmpiBRcCa5KF2NymjslmRlnTmovJYsmCwsuLF1YBMGd",
	"L92KilD7Zcb6OWRO+nJ7b1oUirgJw8k5J7//Of/JJmS6MlqhIgfpJrhsjJXg431rtX2EzmjlMASM1QYt",
	"SeTXFTonCn5BE4OQgiMrVQFNE4HFp7W0mEO6fJq4Ep0k6idrmBE0ETx2aJeUqWm+vxLVQPMINkZaGDnK",
	"dI4FqhFukBUjEgUXrYtS5oJCwSlCMwvEnS+iuVhwZlEQ5ndoQHIEMp8KS0VYoA3xYRmzSDKH49Ro6jvz",
	"jKFOqlXNHSWVvVBRVv85tOtoIYJ1tE5qBSksLiQLSWDQBpUwElK4waEIjKAxi4prh5ZPBbKwoFiQ1Gop",
	"hxQeIIWhPJSOIBD3s+H860nCU9GKUHGpMKaUGRfHay4gnPgpnCRhxYXXLK5CCv/HZ86Lj20Xn9tAcypf",
	"WCsmvfocXWaloV6i79757sC3X8Kz2/ftN99t+3b36OWro8M9v7Xntw75+TZ0u/WHyJeRnr8dQ2jtZ4ba",
	"YcAPvvvouwNevKurStjJb+C/9u0LiKB39zL7E1aaCIx2A8u6x8bhpN5d6OiuzidXpvnsts7cKbI1NnP+",
	"WLzSD1866+k5trs/vr/5ub0zu/2bf3X7Ye/7vnvORF999953n6Zs8K+b8WyIwx7kUv7lhOgm1LaEFMZE",
	"Jo3jUmeiHGtH6e0kWYzdM1Hw33Cl+RUAAP//2Tz40m8GAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
